#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;

    Node(int val)
    {
        data = val;
        next = NULL;
    }
};
class LinkedList
{
private:
    Node *head;
    Node *tail;

public:
    LinkedList()
    {
        head = NULL;
        tail = NULL;
    }
   Ans -1  void push_front(int val)
    {
        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            (*newNode).next = head;
            head = newNode;
        }
    }
  void push_back(int val)
    {
        Node *newNode = new Node(val);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            (*tail).next = newNode;
            tail = newNode;
        }
    }

    void pop_front()
    {
if(head==NULL){
return ;
}
else{

        Node *temp = head;
        head = (*head).next;
        (*temp).next = NULL;
        delete temp;
}
    }
   void pop_back()
{
    if (head == NULL) return;

    if (head == tail) {
        delete head;
        head = tail = NULL;
        return;
    }

    Node *temp = head;
    while (temp->next != tail) {
        temp = temp->next;
    }
    temp->next = NULL;  // break link first
    delete tail;        // delete old tail
    tail = temp;        // update tail
}


    void display()
    {
        Node *temp = head;
        while (temp != NULL)
        {
            cout << (*temp).data << " ";
            temp = (*temp).next;
        }
    }
  void search(int val)
    {
        Node *temp = head;
        int count = 0;
        while (temp != NULL)
        {
            if ((*temp).data == val)
            {
                cout << "Value found at count " << count << endl;

                break;
            }
            else
            {
                count++;
                temp = (*temp).next;
            }
        }
    }
    void inser_at_pos(int val, int pos)
    {
        Node *newNode = new Node(val);
        if (pos == 0)
        {
            push_front(val);
        }
        else
        {

            Node *temp = head;
            for (int i = 0; i < pos - 1; i++)
            {
                temp = (*temp).next;
            }
            (*newNode).next = (*temp).next;
            (*temp).next = newNode;
        }
    }
    void delete_at_pos(int pos)
    {
        if (pos == 0)
        {
            pop_front();
        }
        else
        {

            Node *temp = head;
            for (int i = 0; i < pos - 1; i++)
            {
                temp = (*temp).next;
            }
            (*temp).next = (*(*temp).next).next;
            delete (*temp).next;
        }
    }
Ans -2 
void deleteRepeatedOccurances(Node *head, int key)
    {
        Node *temp = head;
        Node *prev = NULL;
        while (temp != NULL)

        {
            if ((*temp).data == key)
            {
                if (temp == head)
                {
                    pop_front();
                    temp = head;
                }
                else if (temp == tail)
                {
                    pop_back();
                    temp = NULL;

                }

                else
                {

                    (*prev).next = ((*temp).next);
                    (*temp).next = NULL;
                    delete temp;
                    temp = (*prev).next;
                }
            }
            else
            {
              
                prev = temp;
                  temp = (*temp).next;
            }
        }
    }
Ans -3 
void findMid(){
        Node *slow = head ;
        Node *fast = head;;
        while (fast!= NULL && (*fast).next !=NULL)
        {
           slow = (*slow).next;
           fast = (*(*fast).next).next;
           
        }
        cout<< "Middle element is: " << (*slow).data << endl;
        
    } 
Ans - 4
  void reverse()
    {
        Node *curr = head;
        Node *prev = NULL;
        Node *NEXT = NULL;
        while (curr != NULL)
        {
            NEXT = curr->next;
            (*curr).next = prev;
            prev = curr;
            curr = NEXT;
        }
        head = prev;
    }
