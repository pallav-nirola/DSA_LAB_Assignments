Ans 1
#include <iostream>
#include <vector>
using namespace std;
class Stack
{
public:
    vector<int> v;
    void push(int val)
    {
        v.push_back(val);
    }
    void pop()
    {
        v.pop_back();
    }
    int top()
    {
        return v[v.size() - 1];
    }
    void display()
    {
        cout << "Stack elements: ";
        for (int i = 0; i < v.size(); i++)
        {
            cout << v[i] << " ";
        }
        cout << endl;
    }
    bool isEmpty()
    {
        return v.empty();
// v.empty() is a built-in member function of std::vector.

//It returns a bool:
//true if the vector has no elements.
//false if the vector contains at least one element
    }
};
int main()
{
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    if (s.isEmpty() == true)
    {
        cout << "Stack is empty" << endl;
    }
    else
    {
        cout << "Stack is not empty" << endl;
    }
    s.display();
    s.pop();
    cout << "Top element after pop: " << s.top() << endl;
    return 0;
}
Ans 2 
#include <iostream>
#include <vector>
using namespace std;


string reverseString( string& str) {
    vector<char> stack;  

    for (char c : str) {
        stack.push_back(c);
    }
    
 
    
    string reversed = "";
    while (!stack.empty()) {
        reversed += stack[stack.size()-1];
        stack.pop_back();
    }

    return reversed;
}

int main() {
    string input = "DataStructure";
    cout << "Original string: " << input << endl;
    cout << "Reversed string: " << reverseString(input) << endl;
    return 0;
}
