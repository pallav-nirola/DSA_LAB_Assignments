    #include<iostream>
    #include<algorithm>
    #include<string>
//Addition Of Two Matrices
    #include<iostream>
//     #include<algorithm>
//     #include<string>
//     using namespace std;
    
//   int main(){
//       int matrix[3][3] = {
//         {1, 2, 3},
//         {4, 5, 6},
//         {7, 8, 9}
//     };
//       int matrix_2[3][3] = {
//         {1, 2, 3},
//         {4, 5, 6},
//         {7, 8, 9}
//     };
//     int matrix_3[3][3];
//     for(int i = 0 ; i<3 ; i++){
//         for(int j = 0 ; j<3 ; j++){
        
//         matrix_3[i][j] = matrix[i][j] + matrix_2[i][j];}
//     }
//     for(int i = 0 ; i <3 ; i++){
//         for(int j = 0 ; j<3 ; j ++){
//             cout<<matrix_3[i][j]<<" ";
//         }
//         cout<<endl;
//     }
      
//       return 0 ;
//   }
    
    
// Transpose Of A Matrix
    using namespace std;
    
 //     #include<iostream>
//     #include<algorithm>
//     #include<string>
//     using namespace std;
    
//   int main(){
//       int matrix[3][3];
//       for(int i = 0 ; i<3; i ++){
//           for(int j = 0 ; j < 3 ; j++){
//               cin>>matrix[i][j];
//           }
          
//       }
//       for(int i = 0 ; i<3; i ++){
//           for(int j = i+1 ; j < 3 ; j++){
//               swap(matrix[i][j], matrix[j][i]);
//           }
          
//       }
//       cout << "Transposed Matrix"<<endl;
//     for (int i = 0; i < 3; i++) {
//         for (int j = 0; j < 3; j++) {
//             cout << matrix[i][j] << " ";
//         }
//         cout<<endl;
//     }
//       return 0 ;
//   }
    
    
  // using nUpperCase To LowerCase
  //   int main(){
//       string str;
//       getline(cin, str);
//       for(char &ch : str){ // here & is not address operator in char it means you are passing a reference}
//           if (ch >= 'A' && ch <= 'Z') {
//             ch = ch + 32;}}
//       cout<<str;
//       return 0 ;
//   }
  
   //Concatenate Strings
//   int main(){
//       string str;
//       getline(cin, str);
//         string str_2;
//       getline(cin, str_2);
//       string result = "";
//       for(char ch : str) {
//           result = result + ch;
//       }
//       for(char c : str_2) { 
//           result = result + c;  
//       }
//       cout<<result<<endl;
//       return 0 ;// 1st apprach 
//   }
// or directly just do string result = str + str_2;
#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

int main()
{
    string str;
    getline(cin, str);
    string vowel = "aeiouAEIOU";
    string answer = "";
    for (int i = 0; i < str.length(); i++)
    {
        int j;
        for ( j = 0; j < vowel.length(); j++)
        {
            if (str[i] == vowel[j])
            {
                break;
            }
        }
        if (j == vowel.length())
        {
            answer += str[i];
        }
    }

    cout << answer << endl;

    return 0;
}
    //   int main(){ 
    //       string str;
    //       getline(cin, str);
    //       string str_2;
    //       getline(cin, str_2);
    //       string res = "";
    //       string spac=" ";
           
    //       res.reserve(str.size() + str_2.size());// preallocating the memory for the size instead of allocating to each and every char ch
    //       res.append(str);//append means to add something at the end of a string; here you are adding str into res Strings
    //       res.append(spac);// trying to add sapce using using append as it was not possible to add space in the reserve as it would just reserve the space not add it through;
    //       res.append(str_2);
    //       cout<<res; //Optimised Approach
    //       return 0;
    //   }

   // for sorting in alphabetical order
//   int main(){
   
//   string str; 
//   getline(cin, str);
//   sort(str.begin(), str.end());
//   cout<<str;
//       return 0 ;
//     }
  
   
  // you have to remove vowels 
   
    // int main() {
    // string str;
    // cout << "Enter a string: ";
    // getline(cin, str);

    // string vowels = "aeiouAEIOU";
    // string result = "";

    // for (char c : str) {
    //     if (vowels.find(c) == string::npos){ //string::npos is a special constant used to indicate “not found” when searching in a string
    //vowels.find('l') → not found → returns string::npos
    //.find(c) returns either:

// A number (0, 1, 2, …) → meaning found at that index.

// string::npos → meaning not found
// // string::npos == string::npos → true → means l is not a vowel.
// // If c = 'o':
// // vowels.find('o') → found at index 4 → returns 4
// // 4 == string::npos → false → means o is a vowel.
    //         result = result + c;}
    // }
    // cout << "String without vowels: " << result << endl;
    //     return 0 ;
    // }
//second approach;
  #include<iostream>
using namespace std;
int main() {
    string str;
    getline(cin, str);
    string answer = "";
    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' &&
            str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U')
        {
            answer = answer + str[i];
        }
        else{
            continue;
        }
        
    }
    cout<<answer<<endl;
    
    return 0;
}
    
    


// reversing a str;
    // using namespace std;
    // int main(){
    // string str;
    // getline(cin, str);
    // reverse(str.begin(), str.end());
    // cout<<str<<endl;


    
    
